/**
* Given a string, sort it in decreasing order based on the frequency of characters.
*
* Example 1:
* Input: "tree"
* Output: "eert"
* Explanation:
* 'e' appears twice while 'r' and 't' both appear once.
* So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
*
* Example 2:
* Input: "cccaaa"
* Output: "cccaaa"
* Explanation:
* Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
* Note that "cacaca" is incorrect, as the same characters must be together.
*
* Example 3:
* Input: "Aabb"
* Output: "bbAa"
* Explanation:
* "bbaA" is also a valid answer, but "Aabb" is incorrect.
* Note that 'A' and 'a' are treated as two different characters.
*/
import java.util.Collection;
class Solution {
    public String frequencySort(String s) {
        Map<Character, int[]> freq = new HashMap<>();
        
        for(int i=0, len=s.length(); i<len; i++) {
            char c = s.charAt(i);
            if(freq.containsKey(c)) {
                freq.get(c)[1] += 1;
            } else {
                freq.put(c, new int[]{i, 1});
            }
        }
        
        List<int[]> indexCounts = new ArrayList<>(freq.values());
        Collections.sort(indexCounts, (a, b) -> b[1] - a[1]);
        
        StringBuilder sb = new StringBuilder();
        for(int[] arr : indexCounts) {
            char c = s.charAt(arr[0]);
            for(int i=0; i<arr[1]; i++) {
                sb.append(c);
            }
        }
        
        return sb.toString();
    }
}
