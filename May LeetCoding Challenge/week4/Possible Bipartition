/**
* Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.
* Each person may dislike some other people, and they should not go into the same group. 
* Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.
* Return true if and only if it is possible to split everyone into two groups in this way.
*
* Example 1:
* Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
* Output: true
* Explanation: group1 [1,4], group2 [2,3]
*
* Example 2:
* Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
* Output: false
*
* Example 3:
* Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
* Output: false
*
* Note:
*    1 <= N <= 2000
*    0 <= dislikes.length <= 10000
*    1 <= dislikes[i][j] <= N
*    dislikes[i][0] < dislikes[i][1]
*    There does not exist i != j for which dislikes[i] == dislikes[j]
*/
class Solution {
    //simple solution
    public boolean possibleBipartition(int N, int[][] dislikes) {
        int[] group = new int[N+1];
        for (int i = 0; i <= N; i++) {
            group[i] = i; // initial
        }
        
        for (int[] dislike : dislikes) {
            int a = dislike[0];
            int b = dislike[1];
            
            if (group[a] == a && group[b] == b) {
                group[a] = b;
                group[b] = a;
            } else if (group[a] == a && group[b] != b) {
                // let a go to group that all hate b;
                group[a] = group[group[b]];
            } else if (group[b] ==b && group[a] != a) {
                group[b] = group[group[a]];
            } else if (group[b] == group[a]) {
                return false;
            }
        }
        return true;        
    }
    // Graph coloring
    public boolean possibleBipartition(int N, int[][] dislikes) {
        Queue<Integer> queue = new LinkedList<>();
        int[] visited = new int[N + 1];
        Arrays.fill(visited, -1);
        for(int i = 1; i < N + 1; i++){
            if(visited[i] == -1){
                visited[i] = 0;
                queue.offer(i);
                while(!queue.isEmpty()){
                    int u = queue.poll();
                    for(int j = 0; j < dislikes.length; j++){
                        if(dislikes[j][0] == u || dislikes[j][1] == u){
                            int v = dislikes[j][0] == u ? dislikes[j][1] : dislikes[j][0];
                            if(visited[v] == visited[u]){
                                return false;
                            } else if(visited[v] == -1){
                                visited[v] = visited[u] == 0 ? 1 : 0;
                                queue.offer(v);
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
}
