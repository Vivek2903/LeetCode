/**
* You are given a sorted array consisting of only integers where every element appears exactly twice, 
* except for one element which appears exactly once. Find this single element that appears only once.
* Example 1:
* Input: [1,1,2,3,3,4,4,8,8]
* Output: 2
*
* Example 2:
* Input: [3,3,7,7,10,11,11]
* Output: 10
*
* Note: Your solution should run in O(log n) time and O(1) space.
*/
class Solution {
    // general solution
    public int singleNonDuplicate(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        
        while(low < high) {
            int mid = low + (high - low) / 2;
            
            if(mid % 2 == 0) {
                if(nums[mid] == nums[mid + 1]) {
                    low = mid + 2;
                } else {
                    high = mid;
                }
            } else {
                if(nums[mid] == nums[mid - 1]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        
        return nums[low];
    }
    
    //Optimized solution
    public int singleNonDuplicate(int[] nums) {
        int lo = 0, len = nums.length, hi = len / 2;

        while (lo < hi){
            int mid = lo + ((hi - lo) >> 1);
            // for faster execution (mid << 1) can be used
            if (nums[2 * mid] == nums[2 * mid + 1]){
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return nums[2 * lo]; // low << 1 can be used

    }
}
