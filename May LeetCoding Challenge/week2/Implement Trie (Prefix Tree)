/**
* Implement a trie with insert, search, and startsWith methods.
*
* Example:
* Trie trie = new Trie();
* trie.insert("apple");
* trie.search("apple");   // returns true
* trie.search("app");     // returns false
* trie.startsWith("app"); // returns true
* trie.insert("app");   
* trie.search("app");     // returns true
*
* Note:
* You may assume that all inputs are consist of lowercase letters a-z.
* All inputs are guaranteed to be non-empty strings.
*/
class Trie {
    Node root;
    
    class Node {
        Node[] children = new Node[26];
        boolean isComplete;
    }

    /** Initialize your data structure here. */
    public Trie() {
        root = new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node curNode = root;
        for(int i=0, len=word.length(); i<len; i++) {
            int index = word.charAt(i) - 'a'; 
            if (curNode.children[index] == null) {
                curNode.children[index] = new Node(); 
            }
            curNode = curNode.children[index]; 
        }
        curNode.isComplete = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node curNode = root;
        for(int i=0, len=word.length(); i<len; i++) {
            curNode = curNode.children[word.charAt(i) - 'a'];
            if(curNode == null) {
                return false;
            }
        }
        return curNode != null && curNode.isComplete;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node curNode = root;
        for(int i=0, len=prefix.length(); i<len; i++) {
            curNode = curNode.children[prefix.charAt(i) - 'a'];
            if(curNode == null) {
                return false;
            }
        }
        
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
