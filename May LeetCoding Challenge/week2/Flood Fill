/**
* An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).
* Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill,
* and a pixel value newColor, "flood fill" the image.
* To perform a "flood fill", consider the starting pixel, plus any pixels connected 4-directionally 
* to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally 
* to those pixels (also with the same color as the starting pixel), and so on. 
* Replace the color of all of the aforementioned pixels with the newColor.
*
* At the end, return the modified image.
*
* Example 1:
* Input: 
* image = [[1,1,1],[1,1,0],[1,0,1]]
* sr = 1, sc = 1, newColor = 2
* Output: [[2,2,2],[2,2,0],[2,0,1]]
* Explanation: 
* From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected 
* by a path of the same color as the starting pixel are colored with the new color.
* Note the bottom corner is not colored 2, because it is not 4-directionally connected
* to the starting pixel.
*/
class Solution {
    class PixelPosition {
        int row;
        int col;
        
        public PixelPosition(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        
        if(image[sr][sc] == newColor) {
            return image;
        }
        
        boolean[][] visited = new boolean[image.length][image[0].length];
        Queue<PixelPosition> toBeVisited = new LinkedList<>();
        
        toBeVisited.add(new PixelPosition(sr, sc));
        visited[sr][sc] = true;
        
        int originalColor = image[sr][sc];
        
        while(!toBeVisited.isEmpty()) {
            PixelPosition pos = toBeVisited.poll();
            image[pos.row][pos.col] = newColor;
            
            int top = pos.row - 1;
            int bottom = pos.row + 1;
            int left = pos.col - 1;
            int right = pos.col + 1;
            
            if(image.length > top && top >= 0 && originalColor == image[top][pos.col]) {
                toBeVisited.add(new PixelPosition(top, pos.col));
            }
            
            if(image.length > bottom && bottom >= 0 && originalColor == image[bottom][pos.col]) {
                toBeVisited.add(new PixelPosition(bottom, pos.col));
            }
            
            if(image[pos.row].length > left && left >= 0 && originalColor == image[pos.row][left]) {
                toBeVisited.add(new PixelPosition(pos.row, left));
            }
            
            if(image[pos.row].length > right && right >= 0 && originalColor == image[pos.row][right]) {
                toBeVisited.add(new PixelPosition(pos.row, right));
            }
        }
        
        return image;
    }
}
