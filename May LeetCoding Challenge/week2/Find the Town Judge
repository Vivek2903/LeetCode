/**
* In a town, there are N people labelled from 1 to N.  
* There is a rumor that one of these people is secretly the town judge.
* If the town judge exists, then:
*   1. The town judge trusts nobody.
*   2. Everybody (except for the town judge) trusts the town judge.
*   3. There is exactly one person that satisfies properties 1 and 2.
*
* You are given trust, an array of pairs trust[i] = [a, b] representing that 
* the person labelled a trusts the person labelled b.
* If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.
*
* Example 1:
* Input: N = 2, trust = [[1,2]]
* Output: 2
*
* Example 2:
* Input: N = 3, trust = [[1,3],[2,3]]
* Output: 3
*
* Example 3:
* Input: N = 3, trust = [[1,3],[2,3],[3,1]]
* Output: -1
*
* Example 4:
* Input: N = 3, trust = [[1,2],[2,3]]
* Output: -1
*
* Example 5:
* Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
* Output: 3
*
* Note:
*    1 <= N <= 1000
*    trust.length <= 10000
*    trust[i] are all different
*    trust[i][0] != trust[i][1]
*    1 <= trust[i][0], trust[i][1] <= N
*/
// This one takes O(N^2) spane and O(N^2) time
class Solution {
    public int findJudge(int N, int[][] trust) {
        
        int[][] plot = new int[N][N];

        for(int[] t : trust) {
            plot[t[0]-1][t[1]-1] = 1;
        }
        
        for(int i=0; i<N; i++) {
            boolean isValid = true;
            for(int col=0; col<N; col++) {
                if(plot[i][col] == 1) {
                    isValid = false;
                    break;
                }
            }
            
            if(isValid) {
                int sum = 0;
                for(int row=0; row<N; row++) {
                    sum += plot[row][i];
                }

                if(sum == N-1) {
                    return i+1;
                }
            }
        }
        
        return -1;
    }
}
/* Alternate solution with less memory O(2N) and improved time O(N)
class Solution {
    public int findJudge(int N, int[][] trust) {
        if(trust.length <  N-1){
            return -1;
        }
        
        int[] inEdges = new int[N+1];
        int[] outEdges = new int[N+1];
        for(int[] relation : trust){
            outEdges[relation[0]]++;
            inEdges[relation[1]]++;
        }
        for (int i = 1; i <= N; i++) {
            if (outEdges[i] == 0 && inEdges[i] == N - 1) {
                return i;
            }
        }
        return -1;
    }
}
*/
