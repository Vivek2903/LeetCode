/**
* Given an array of size n, find the majority element. 
* The majority element is the element that appears more than ⌊ n/2 ⌋ times.
* You may assume that the array is non-empty and the majority element always exist in the array.
*
* Example 1:
* Input: [3,2,3]
* Output: 3
*
* Example 2:
* Input: [2,2,1,1,1,2,2]
* Output: 2
*/

class Solution {
    // time - O(n) and Space - O(n)
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> numFreq = new HashMap<>();
        for(int n : nums) {
            numFreq.put(n, numFreq.getOrDefault(n, 0) + 1);
        }
        
        int freq = nums.length / 2;
        for(int n : numFreq.keySet()) {
            if(numFreq.get(n) > freq) {
                return n;
            }
        }
        
        return -1;
    }
}
