/**
* In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.
* Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
* We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.
* Return true if and only if the nodes corresponding to the values x and y are cousins.
*
* Example 1:
* Input: root = [1,2,3,4], x = 4, y = 3
* Output: false
*
* Example 2:
* Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
* Output: true
*
* Example 3:
* Input: root = [1,2,3,null,4], x = 2, y = 3
* Output: false
*
* Note:
* The number of nodes in the tree will be between 2 and 100.
* Each node has a unique integer value from 1 to 100.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        Queue<TreeNode> parents = new LinkedList<>();
        Queue<TreeNode> children = new LinkedList<>();
        Queue<TreeNode> temp = null;
        
        parents.add(root);
        
        boolean xFound = false;
        TreeNode xParent = null;
        boolean yFound = false;
        TreeNode yParent = null;
        
        while(!parents.isEmpty()) {
            TreeNode node = parents.poll();
            
            if(node.val == x) {
                xFound = true;
            } else if(node.val == y) {
                yFound = true;
            }
            
            if(node.left != null) {
                children.add(node.left);
                if(node.left.val == x) {
                    xFound = true;
                    xParent = node;
                } else if(node.left.val == y) {
                    yFound = true;
                    yParent = node;
                }
            }
            
            if(node.right != null) {
                children.add(node.right);
                if(node.right.val == x) {
                    xFound = true;
                    xParent = node;
                } else if(node.right.val == y) {
                    yFound = true;
                    yParent = node;
                }
            }
            
            if(xFound && yFound) {
                return xParent == null || yParent == null || xParent == yParent ? false : true;
            }
            
            if(parents.isEmpty()) {
                if(xFound || yFound) {
                    return xParent == null || yParent == null || xParent == yParent ? false : true;
                }
                temp = parents;
                parents = children;
                children = temp;
            }
        }
        
        return false;
    }
}
