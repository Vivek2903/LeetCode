/**
* Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.
* You have the following 3 operations permitted on a word:
*
*    Insert a character
*    Delete a character
*    Replace a character
*
* Example 1:
* Input: word1 = "horse", word2 = "ros"
* Output: 3
* Explanation: 
* horse -> rorse (replace 'h' with 'r')
* rorse -> rose (remove 'r')
* rose -> ros (remove 'e')
*
* Example 2:
* Input: word1 = "intention", word2 = "execution"
* Output: 5
* Explanation: 
* intention -> inention (remove 't')
* inention -> enention (replace 'i' with 'e')
* enention -> exention (replace 'n' with 'x')
* exention -> exection (replace 'n' with 'c')
* exection -> execution (insert 'u')
*/
class Solution {
    public int minDistance(String word1, String word2) {
        int w1Len = word1.length();
        int w2Len = word2.length();
        if(w1Len * w2Len == 0) {
            return w1Len + w2Len;
        }
        int[][] distance = new int[w1Len+1][w2Len+1];
        
        for(int i=0; i<=w1Len; i++) {
            distance[i][0] = i;
        }
        
        for(int i=0; i<=w2Len; i++) {
            distance[0][i] = i;
        }
        
        for(int i=1; i<=w1Len; i++) {
            for(int j=1; j<=w2Len; j++) {
                if(word1.charAt(i-1) == word2.charAt(j-1)) {
                    distance[i][j] = distance[i-1][j-1];
                } else {
                    distance[i][j] = Math.min(Math.min(distance[i-1][j-1], distance[i-1][j]), distance[i][j-1]) + 1;
                }
            }
        }
        return distance[w1Len][w2Len];
    }
}
/* More Efficient Solution
class Solution {
    char[] w1, w2;
    int[][] memo;

    public int minDistance(String word1, String word2) {
        w1 = word1.toCharArray();
        w2 = word2.toCharArray();
        memo = new int[w1.length][w2.length];
        return f(w1.length - 1, w2.length - 1);
    }

    private int f(int i, int j) {
        if (i < 0) return j + 1;
        if (j < 0) return i + 1;
        if (memo[i][j] > 0) return memo[i][j];
        if (w1[i] == w2[j]) return memo[i][j] = f(i - 1, j - 1);
        return memo[i][j] = 1 + Math.min(Math.min(f(i - 1, j), f(i, j - 1)), f(i - 1, j - 1));
    }
}
*/
