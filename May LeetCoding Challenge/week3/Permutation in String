/**
* Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. 
* In other words, one of the first string's permutations is the substring of the second string.
*
* Example 1:
* Input: s1 = "ab" s2 = "eidbaooo"
* Output: True
* Explanation: s2 contains one permutation of s1 ("ba").
*
* Example 2:
* Input:s1= "ab" s2 = "eidboaoo"
* Output: False
*
* Note:
*    The input strings only contain lower case letters.
*    The length of both given strings is in range [1, 10,000].
*/
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int s1Len = s1.length();
        int s2Len = s2.length();
        
        if(s1Len > s2Len) {
            return false;
        }
        
        int[] charsToCheck = new int[26];
        int[] chars = new int[26];
        
        for(int i=0; i<s1Len; i++) {
            chars[s2.charAt(i) - 'a']++;
            charsToCheck[s1.charAt(i) - 'a']++;
        }
                
        for(int i=0, len=s2Len - s1Len; i<len; i++) {
            if(Arrays.equals(chars, charsToCheck)) {
                return true;
            }
            chars[s2.charAt(i) - 'a']--;
            chars[s2.charAt(i + s1Len) - 'a']++;
        }
        
        return Arrays.equals(chars, charsToCheck);
    }
}
