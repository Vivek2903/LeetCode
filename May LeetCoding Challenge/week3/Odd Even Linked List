/**
* Given a singly linked list, group all odd nodes together followed by the even nodes. 
* Please note here we are talking about the node number and not the value in the nodes.
* You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.
*
* Example 1:
* Input: 1->2->3->4->5->NULL
* Output: 1->3->5->2->4->NULL
*
* Example 2:
* Input: 2->1->3->5->6->4->7->NULL
* Output: 2->3->6->7->1->5->4->NULL
*
* Note:
*    The relative order inside both the even and odd groups should remain as it was in the input.
*    The first node is considered odd, the second node even and so on ...
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null || head.next.next == null) {
            return head;
        }
        boolean isEven = false;
        ListNode evenHead = null;
        ListNode evens = null;
        ListNode oddHead = null;
        ListNode odds = null;
        
        while(head != null) {
            ListNode temp = head;
            head = head.next;
            if(isEven) {
                if(evenHead == null) {
                    evenHead = temp;
                    evens = temp;
                } else {
                    evens.next = temp;
                    evens = evens.next;
                }
            } else {
                if(oddHead == null) {
                    oddHead = temp;
                    odds = temp;
                } else {
                    odds.next = temp;
                    odds = odds.next;
                }
            }
            isEven = !isEven;
        }
        evens.next = null;
        odds.next = evenHead;
        
        return oddHead;
    }
}
