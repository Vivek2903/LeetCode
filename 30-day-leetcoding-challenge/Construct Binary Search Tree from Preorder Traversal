/**
* Return the root node of a binary search tree that matches the given preorder traversal.
* (Recall that a binary search tree is a binary tree where for every node, any descendant of node.
* left has a value < node.val, and any descendant of node.right has a value > node.val.  
* Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)
*
* Example 1:
* Input: [8,5,1,7,10,12]
* Output: [8,5,10,1,7,null,12]
*
* Note: 
* 1 <= preorder.length <= 100
* The values of preorder are distinct.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        return BSTFromPreorderHelper(preorder, 0, preorder.length-1);
    }
    
    private TreeNode BSTFromPreorderHelper(int[] preorder, int low, int high) {
        if(low > high) {
            return null;
        }
        
        TreeNode node = new TreeNode(preorder[low]);
        
        int i = low;
        while(i<=high) {
            if(preorder[i] > preorder[low]) {
                break;
            }
            i++;
        }
        
        node.left = BSTFromPreorderHelper(preorder, low + 1, i-1);
        node.right = BSTFromPreorderHelper(preorder, i, high);
        
        return node;
    }
}
