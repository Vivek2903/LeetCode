/**
* Given a m x n grid filled with non-negative numbers,
* find a path from top left to bottom right which minimizes the sum of all numbers along its path.
* Note: You can only move either down or right at any point in time.
* Example:
* Input:
* [
*   [1,3,1],
*   [1,5,1],
*   [4,2,1]
* ]
* Output: 7
* Explanation: Because the path 1→3→1→1→1 minimizes the sum.
*/
//Using DP is better solution
class Solution {
    public int minPathSum(int[][] grid) {
        for(int i=0; i<grid.length; i++) {
            for(int j=0; j<grid[i].length; j++) {
                int top = i > 0 ? grid[i-1][j] : -1;
                int left = j > 0 ? grid[i][j-1] : -1;
                
                grid[i][j] += top != -1 && left != -1
                    ? Math.min(top, left)
                    : top != -1 ? top
                        : left != -1 ? left : 0;
            }
        }
        
        return grid[grid.length-1][grid[grid.length-1].length-1];
    }
}
