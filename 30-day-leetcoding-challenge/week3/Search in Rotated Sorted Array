/**
* Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
* (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
* You are given a target value to search. If found in the array return its index, otherwise return -1.
* You may assume no duplicate exists in the array.
* Your algorithm's runtime complexity must be in the order of O(log n).
*
* Example 1:
* Input: nums = [4,5,6,7,0,1,2], target = 0
* Output: 4
*
* Example 2:
* Input: nums = [4,5,6,7,0,1,2], target = 3
* Output: -1
*/
// Recursive Logic
class Solution {
    public int search(int[] nums, int target) {
        return searchHelper(nums, 0, nums.length-1, target);
    }
    
    private int searchHelper(int[] nums, int low, int high, int target) {
        if(low > high) {
            return -1;
        }
        
        int mid = low + (high - low)/2;
        if(nums[mid] == target) {
            return mid;
        }

        if(nums[low] <= nums[mid]) {
            return (target >= nums[low] && target < nums[mid])
                ? searchHelper(nums, low, mid - 1, target)
                : searchHelper(nums, mid + 1, high, target);
        }
        
        return (target > nums[mid] && target <= nums[high])
            ? searchHelper(nums, mid + 1, high, target)
            : searchHelper(nums, low, mid - 1, target);
    }
}
// Iterative logic
class Solution {
    public int search(int[] nums, int target) {
        return searchHelper(nums, 0, nums.length-1, target);
    }
    
    private int searchHelper(int[] nums, int low, int high, int target) {
        while(low <= high) {
            int mid = low + (high - low)/2;
            if(nums[mid] == target) {
                return mid;
            }

            if(nums[low] <= nums[mid]) {
                if(target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if(target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
        
    }
}
