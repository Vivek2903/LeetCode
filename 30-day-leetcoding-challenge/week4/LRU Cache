/**
* Design and implement a data structure for Least Recently Used (LRU) cache.
* It should support the following operations: get and put.
* get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
* put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity,
* it should invalidate the least recently used item before inserting a new item.
* The cache is initialized with a positive capacity.
*
* Follow up:
* Could you do both operations in O(1) time complexity?
*
* Example:
* LRUCache cache = new LRUCache( 2 /* capacity */ );
* cache.put(1, 1);
* cache.put(2, 2);
* cache.get(1);       // returns 1
* cache.put(3, 3);    // evicts key 2
* cache.get(2);       // returns -1 (not found)
* cache.put(4, 4);    // evicts key 1
* cache.get(1);       // returns -1 (not found)
* cache.get(3);       // returns 3
* cache.get(4);       // returns 4
*/
class LRUCache {

    class Entry {
        int key;
        int value;
        Entry left;
        Entry right;
        
        public Entry(int key, int value, Entry left, Entry right) {
            this.key = key;
            this.value = value;
            this.left = left;
            this.right = right;
        }
    }
    
    final int LRU_SIZE;
    Map<Integer, Entry> lru;
    Entry start, end;
    
    public LRUCache(int capacity) {
        LRU_SIZE = capacity;
        lru = new HashMap<>();
    }
    
    public int get(int key) {
        if(lru.containsKey(key)) {
            Entry entry = lru.get(key);
            removeEntry(entry);
            addToTop(entry);
            return entry.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(lru.containsKey(key)) {
            Entry entry = lru.get(key);
            entry.value = value;
            removeEntry(entry);
            addToTop(entry);
        } else {
            Entry entry = new Entry(key, value, null, null);
            
            if(lru.size() >= LRU_SIZE) {
                lru.remove(end.key);
                removeEntry(end);
                addToTop(entry);
            } else {
                addToTop(entry);
            }
            
            lru.put(key, entry);
        }
    }
    
    private void addToTop(Entry entry) {
        entry.right = start;
        entry.left = null;
        
        if(start != null) {
            start.left = entry;
        }
        
        start = entry;
        
        if(end == null) {
            end = start;
        }
    }
    
    private void removeEntry(Entry entry) {
        if(entry.left != null) {
            entry.left.right = entry.right;
        } else {
            start = entry.right;
        }
        
        if(entry.right != null) {
            entry.right.left = entry.left;
        } else {
            end = entry.left;
        }
    }
    
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
