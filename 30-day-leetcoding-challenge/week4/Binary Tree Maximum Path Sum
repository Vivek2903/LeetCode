/**
* Given a non-empty binary tree, find the maximum path sum.
* For this problem, a path is defined as any sequence of nodes 
* from some starting node to any node in the tree along the parent-child connections. 
* The path must contain at least one node and does not need to go through the root.
*
* Example 1:
* Input: [1,2,3]
*
*        1
*       / \
*      2   3
*
* Output: 6 //which contains [2, 1, 3]
*
* Example 2:
* 
* Input: [10,9,20,null,null,15,7]
*
*   10
*   / \
*  9  20
*    /  \
*   15   7
*
* Output: 42 //which contains [9,10,20,15]
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int currentMax;
    public int maxPathSum(TreeNode root) {
        currentMax = Integer.MIN_VALUE;
        return Math.max(maxPathSumHelper(root), currentMax);
    }
    
    public int maxPathSumHelper(TreeNode root) {
        if(root == null) {
            return 0;
        }
        
        int left = maxPathSumHelper(root.left);
        int right = maxPathSumHelper(root.right);
        int maxPath = Math.max(root.val, Math.max(left, right) + root.val);
        currentMax = Math.max(Math.max(root.val + left + right, maxPath), currentMax);
        return maxPath;
    }
}
