/**
* Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
*
* push(x) -- Push element x onto stack.
* pop() -- Removes the element on top of the stack.
* top() -- Get the top element.
* getMin() -- Retrieve the minimum element in the stack.
*
* ["MinStack","push","push","push","top","pop","getMin","pop","getMin","pop","push","top","getMin","push","top","getMin","pop","getMin"]
* [[],[2147483646],[2147483646],[2147483647],[],[],[],[],[],[],[2147483647],[],[],[-2147483648],[],[],[],[]]
*
* Example:
* MinStack minStack = new MinStack();
* minStack.push(-2);
* minStack.push(0);
* minStack.push(-3);
* minStack.getMin();   --> Returns -3.
* minStack.pop();
* minStack.top();      --> Returns 0.
* minStack.getMin();   --> Returns -2.
*/
class MinStack {
    private Stack<Integer> values;
    private Stack<Integer> mins;
    
    /** initialize your data structure here. */
    public MinStack() {
        values = new Stack<>();
        mins = new Stack<>();
    }
    
    public void push(int x) {
        if(values.isEmpty()) {
            values.push(x);
            mins.push(x);
        } else {
            int min = mins.peek();
            mins.push(min < x ? min : x);
            values.push(x);
        }
    }
    
    public void pop() {
        if(!values.isEmpty()) {
            values.pop();
            mins.pop();
        }
    }
    
    public int top() {
        return values.peek();
    }
    
    public int getMin() {
        return mins.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
