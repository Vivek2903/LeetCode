/**
* Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.
*
* Example 1:
* Input: S = "ab#c", T = "ad#c"
* Output: true
* Explanation: Both S and T become "ac".
*
* Example 2:
* Input: S = "ab##", T = "c#d#"
* Output: true
* Explanation: Both S and T become "".
*
* Example 3:
* Input: S = "a##c", T = "#a#c"
* Output: true
* Explanation: Both S and T become "c".
*
* Example 4:
* Input: S = "a#c", T = "b"
* Output: false
* Explanation: S becomes "c" while T becomes "b".
*
* Note:
* 1 <= S.length <= 200
* 1 <= T.length <= 200
* S and T only contain lowercase letters and '#' characters.
* Follow up: Can you solve it in O(N) time and O(1) space?
*/
class Solution {
    private int getValidCharIndex(String str, int ptr) {
        int skips = 0;
        while(ptr > -1) {
            if(str.charAt(ptr) == '#') {
                skips++;
            } else if(skips > 0) {
                skips--;
            } else {
                break;
            }
            ptr--;
        }
        
        return ptr;
    }
    public boolean backspaceCompare(String S, String T) {
        int sp = S.length() - 1;
        int tp = T.length() - 1;

        while(sp > -1 && tp > -1) {
            sp = getValidCharIndex(S, sp);
            tp = getValidCharIndex(T, tp);
            
            if(sp > -1 && tp > -1 && S.charAt(sp) != T.charAt(tp)) {
                return false;
            }
            
            sp--;
            tp--;
        }
        
        sp = getValidCharIndex(S, sp);
        tp = getValidCharIndex(T, tp);
        
        return sp == tp;
    }
}
