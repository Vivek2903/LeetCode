/**
* Given a 2D board and a list of words from the dictionary, find all words in the board.
* Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells 
* are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.
*
* Example:
* Input: 
* board = [
*   ['o','a','a','n'],
*   ['e','t','a','e'],
*   ['i','h','k','r'],
*   ['i','f','l','v']
* ]
* words = ["oath","pea","eat","rain"]
* Output: ["eat","oath"]
* Note:
*     All inputs are consist of lowercase letters a-z.
*     The values of words are distinct.
*/

class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        if(board == null || board[0] == null || words == null) {
            return new LinkedList<>();
        }
        
        Trie trie = new Trie();
        
        for(String w : words) {
            trie.insert(w);
        }
        
        boolean[][] traced = new boolean[board.length][board[0].length];
        Set<String> res = new HashSet();
        for(int i=0; i<board.length; i++) {
            for(int j=0; j<board[0].length; j++) {
                traverseBoard(board, i, j, trie.root, traced, res);
            }
        }
        
        return new ArrayList<>(res);
    }
    
    private void traverseBoard(char[][] board, int r, int c, Trie.TrieNode node,
                              boolean[][] traced, Set<String> res) {
        if(r < 0 || r>=board.length || c < 0 || c >= board[0].length || traced[r][c]) {
            return;
        }
        
        char w = board[r][c];
        
        if(node.children[w - 'a'] == null) {
            return;
        }
        
        traced[r][c] = true;
        
        node = node.children[w - 'a'];
        
        if(!node.word.isEmpty()) {
            res.add(node.word);
        }
        
        traverseBoard(board, r - 1, c, node, traced, res);
        traverseBoard(board, r + 1, c, node, traced, res);
        traverseBoard(board, r, c - 1, node, traced, res);
        traverseBoard(board, r, c + 1, node, traced, res);
        
        traced[r][c] = false;
    }
    
    class Trie {
        TrieNode root;
        
        public Trie() {
            root = new TrieNode();
        }
        
        public void insert(String w) {
            TrieNode curNode = this.root;
            
            for(int i=0, len=w.length(); i<len; i++) {
                char c = w.charAt(i);
                int index = c - 'a';
                if(curNode.children[index] == null) {
                    curNode.children[index] = new TrieNode();
                }
                curNode = curNode.children[index];
            }
            
            curNode.word = w;
        }
        
        class TrieNode {
            TrieNode[] children;
            String word;

            public TrieNode() {
                this.word = "";
                this.children = new TrieNode[26];
            }
        }
    }
}
