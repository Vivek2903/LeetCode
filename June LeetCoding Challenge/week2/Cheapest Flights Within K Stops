/**
* There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.
* Now given all the cities and flights, together with starting city src and the destination dst, 
* your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.
*
* Example 1:
* Input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 1
* Output: 200
* Explanation: The cheapest price from city 0 to city 2 with at most 1 stop costs 200.
*
* Example 2:
* Input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 0
* Output: 500
* Explanation: The cheapest price from city 0 to city 2 with at most 0 stop costs 500.
*
* Constraints:
*     The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
*     The size of flights will be in range [0, n * (n - 1) / 2].
*     The format of each flight will be (src, dst, price).
*     The price of each flight will be in the range [1, 10000].
*     k is in the range of [0, n - 1].
*     There will not be any duplicated flights or self cycles.
*/
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        int[] distance = new int[n];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[src] = 0;
        
        for (int i = 0; i <= K; i++) {
            int[] curDistance = Arrays.copyOf(distance, n);
            for (int[] flight : flights) {
                if (distance[flight[0]] == Integer.MAX_VALUE) continue;
                    curDistance[flight[1]] = Math.min(curDistance[flight[1]], distance[flight[0]] + flight[2]);
                }
            distance = curDistance;
        }
        return distance[dst] == Integer.MAX_VALUE ? -1 : distance[dst];
    }
}
