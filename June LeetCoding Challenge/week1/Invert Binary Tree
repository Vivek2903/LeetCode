/**
* Invert a binary tree.
*
* Example:
* Input:
*      4
*    /   \
*   2     7
*  / \   / \
* 1   3 6   9
*
* Output:
*      4
*    /   \
*   7     2
*  / \   / \
* 9   6 3   1
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null) {
            return root;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while(!queue.isEmpty()) {
            TreeNode node = queue.poll();
            
            if(node.left != null) {
                queue.add(node.left);
            }
            
            if(node.right != null) {
                queue.add(node.right);
            }
            
            TreeNode left = node.left;
            node.left = node.right;
            node.right = left;
        }
        return root;
    }
}
