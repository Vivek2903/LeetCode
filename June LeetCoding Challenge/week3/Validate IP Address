/**
* Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.
* IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, 
* each ranging from 0 to 255, separated by dots ("."), e.g.,172.16.254.1;
* Besides, leading zeros in the IPv4 is invalid. For example, the address 172.16.254.01 is invalid.
* IPv6 addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. 
* The groups are separated by colons (":"). For example, the address 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is a valid one. 
* Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address 
* to upper-case ones, so 2001:db8:85a3:0:0:8A2E:0370:7334 is also a valid IPv6 address(Omit leading zeros and using upper cases).
* However, we don't replace a consecutive group of zero value with a single empty group using two consecutive colons 
* (::) to pursue simplicity. For example, 2001:0db8:85a3::8A2E:0370:7334 is an invalid IPv6 address.
* Besides, extra leading zeros in the IPv6 is also invalid. 
* For example, the address 02001:0db8:85a3:0000:0000:8a2e:0370:7334 is invalid.
*
* Note: You may assume there is no extra space or special characters in the input string.
*
* Example 1:
* Input: "172.16.254.1"
* Output: "IPv4"
* Explanation: This is a valid IPv4 address, return "IPv4".
*
* Example 2:
* Input: "2001:0db8:85a3:0:0:8A2E:0370:7334"
* Output: "IPv6"
* Explanation: This is a valid IPv6 address, return "IPv6".
*
* Example 3:
* Input: "256.256.256.256"
* Output: "Neither"
* Explanation: This is neither a IPv4 address nor a IPv6 address.
*/
// Using pattern matching
import java.util.regex.Matcher;
import java.util.regex.Pattern;
class Solution {
    private final Pattern ip4pattern = Pattern.compile(
        "^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$");
    
    private final Pattern ip6pattern = Pattern.compile("^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$");
    
    public String validIPAddress(String IP) {
        
        if(ip4pattern.matcher(IP).matches()) {
            return "IPv4";
        }
        
        if(ip6pattern.matcher(IP).matches()) {
            return "IPv6";
        }
        
        return"Neither";
    }
}

// Simple solution
/*
1. split by '.', if length is 4, check v4
2. split by ':', if length is 8, check v8
check v4:
1. cannot has zero length chunk.
2. for each chunk, if has leading zero and length is more than 1, return false
3. for each chunk, it must be within [0, 255] and no leading zero
check v6:
1. each chunk has length within [1, 4]
2. each chunk must only have letters or digits
*/
class Solution {
    public String validIPAddress(String IP) {
        if (IP == null) {
            return "Neither";
        }
        if (isv4(IP)) {
            return "IPv4";
        } else if (isv6(IP)) {
            return "IPv6";
        } else {
            return "Neither";
        }
    }
    private boolean isv4(String ip) {
        if (ip.endsWith(".")) {
            return false;
        }
        String[] array = ip.split("\\.");
        if (array.length != 4) {
            return false;
        }
        for (String chunk : array) {
            if (chunk.length() == 0 || chunk.length() != 1 && chunk.charAt(0) == '0') {
                return false;
            }
            if (chunk.contains("+") || chunk.contains("-")) {
                return false;
            }
            try {
                int num = Integer.parseInt(chunk);
                if (num < 0 || num > 255) {
                    return false;
                }
            } catch(NumberFormatException e) {
                return false;
            }
        }
        return true;
    }
    private boolean isv6(String ip) {
        if (ip.endsWith(":")) {
            return false;
        }
        String[] array = ip.split(":");
        if (array.length != 8) {
            return false;
        }
        for (String chunk : array) {
            if (chunk.length() < 1 || chunk.length() > 4) {
                return false;
            }
            if (chunk.contains("+") || chunk.contains("-")) {
                return false;
            }
            try {
                Integer.parseInt(chunk, 16);
            } catch(NumberFormatException e) {
                return false;
            }
        }
        return true;
    }
}
