/**
* Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
* A region is captured by flipping all 'O's into 'X's in that surrounded region.
*
* Example:
* X X X X
* X O O X
* X X O X
* X O X X
*
* After running your function, the board should be:
*
* X X X X
* X X X X
* X X X X
* X O X X
*
* Explanation:
* Surrounded regions shouldnâ€™t be on the border, 
* which means that any 'O' on the border of the board are not flipped to 'X'. 
* Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. 
* Two cells are connected if they are adjacent cells connected horizontally or vertically.
*/
class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length < 1 || board[0].length < 1) {
            return;
        }
        
        int row = board.length;
        int col = board[0].length;
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = '-';
                }
            }
        }
        
        for (int i = 0; i < row; i++) {
		    if (board[i][0] == '-') {
			    fill(board, i, 0, '-', 'O');
            }
        }
        
        for (int i = 0; i < row; i++) {
		    if (board[i][col-1] == '-') {
			    fill(board, i, col-1, '-', 'O');
            }
        }
        
        for (int i = 0; i < col; i++) {
		    if (board[0][i] == '-') {
			    fill(board, 0, i, '-', 'O');
            }
        }
        
        for (int i = 0; i < col; i++) {
		    if (board[row-1][i] == '-') {
			    fill(board, row-1, i, '-', 'O');
            }
        }
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(board[i][j] == '-') {
                    board[i][j] = 'X';
                }
            }
        }

    }
    
    private void fill(char[][] board, int i, int j, char o, char n) {
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != o) {
            return;
        }
        
        board[i][j] = n;
        fill(board, i-1, j, o, n);
        fill(board, i+1, j, o, n);
        fill(board, i, j-1, o, n);
        fill(board, i, j+1, o, n);
    }
}
