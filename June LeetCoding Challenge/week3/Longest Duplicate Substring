/**
* Given a string S, consider all duplicated substrings: (contiguous) substrings of 
* S that occur 2 or more times.  (The occurrences may overlap.)
* Return any duplicated substring that has the longest possible length.  
* (If S does not have a duplicated substring, the answer is "".)
*
* Example 1:
* Input: "banana"
* Output: "ana"
*
* Example 2:
* Input: "abcd"
* Output: ""
*
* Note:
*     2 <= S.length <= 10^5
*     S consists of lowercase English letters.
*/
class Solution {
    int a = 26;
    long modulus = (long)Math.pow(2, 32);
    public String longestDupSubstring(String S) {
        int l = 1, r = S.length() - 1;
        int[] result = new int[]{0, 0};
        while(l <= r) {
            int mid = l + ((r-l) >> 1);
            int[] temp = search(S, mid);
            if(temp != null) {
                result = temp;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return S.substring(result[0], result[1]);
    }

    public int[] search(String S, int L) {
        HashSet<Long> set = new HashSet<>();
        long hash = 0, aL = 1;
        for (int i = 1; i <= L; ++i) {
            aL = (aL * a) % modulus;
        }
        
        for(int i = 0; i < L; ++i) {
            hash = (hash * a + (S.charAt(i) - 'a')) % modulus;
        }
        
        set.add(hash);
        
        for(int i=1, len=S.length(); i+L-1 < len; i++) {
            int j = i + L - 1;
            hash = (hash * a - (S.charAt(i-1) - 'a') * aL % modulus + modulus) % modulus;
            hash = (hash + (S.charAt(j) - 'a')) % modulus;
            if(set.contains(hash)) {
                return new int[] {i, j + 1};
            }
            set.add(hash);
        }
        
        return null;
    }
}
