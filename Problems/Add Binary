/**
* Given two binary strings, return their sum (also a binary string).
* The input strings are both non-empty and contains only characters 1 or 0.
*
* Example 1:
* Input: a = "11", b = "1"
* Output: "100"
*
* Example 2:
* Input: a = "1010", b = "1011"
* Output: "10101"
*
* Constraints:
* Each string consists only of '0' or '1' characters.
* 1 <= a.length, b.length <= 10^4
* Each string is either "0" or doesn't contain any leading zero.
*/
class Solution {
    public String addBinary(String a, String b) {     
        StringBuffer bfr = new StringBuffer();
        
        int i = a.length() - 1;
        int j = b.length() - 1;
        int carry = 0;
        
        while(i >= 0 && j >= 0) {
            if(a.charAt(i) == '1' && b.charAt(j) == '1') {
                bfr.append(carry);
                carry = 1;
            } else if(a.charAt(i) == '0' && b.charAt(j) == '0') {
                bfr.append(carry);
                carry = 0;
            } else {
                bfr.append(carry == 1 ? 0 : 1);
            }
            i--;
            j--;
        }
        
        while(carry != 0 && i>=0) {
            if(a.charAt(i--) == '0') {
                bfr.append(1);
                carry = 0;
            } else {
                bfr.append(0);
            }
        }
        
        while(carry != 0 && j>=0) {
            if(b.charAt(j--) == '0') {
                bfr.append(1);
                carry = 0;
            } else {
                bfr.append(0);
            }
        }
        
        StringBuffer result = new StringBuffer();
        if(carry == 1) {
            result.append(1);
        }
        
        if(i >= 0) {
            result.append(a.substring(0, i+1));
        } else if(j >= 0){
            result.append(b.substring(0, j+1));
        }
        
        return result.append(bfr.reverse()).toString();
    }
}
